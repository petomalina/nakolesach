package functions

import (
	"context"
	"encoding/json"
	"log"
	"nakolesach/models"
	"net/http"
	"strings"

	"cloud.google.com/go/firestore"
)

const (
	collectionRides = "rides"
)

var (
	fsClient *firestore.Client
	fsRides  *firestore.CollectionRef
)

func init() {
	client, err := firestore.NewClient(context.Background(), "nakolesach-sk")
	if err != nil {
		log.Fatalf("firestore.NewClient: %v", err)
	}

	fsClient = client
	fsRides = client.Collection(collectionRides)
}

func Ride(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		var d models.Ride
		if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
			w.WriteHeader(400)
			return
		}

		doc, _, err := fsRides.Add(context.Background(), d)
		if err != nil {
			log.Printf("fsRides.Add: %v", err)
			w.WriteHeader(503)
			return
		}

		d.ID = doc.ID

		if err := json.NewEncoder(w).Encode(&d); err != nil {
			w.WriteHeader(503)
			log.Printf("json.Encode: %v", err)
			return
		}

	} else if r.Method == "GET" {
		id := strings.TrimPrefix(r.URL.Path, "/Ride/")
		doc, err := fsRides.Doc(id).Get(context.Background())
		if err != nil {
			log.Printf("fsRide.Doc().Get(): %v", err)
			w.WriteHeader(503)
		}

		var d models.Ride
		err = doc.DataTo(&d)
		if err != nil {
			log.Printf("doc.DataTo(): %v", err)
			w.WriteHeader(503)
		}

		err = json.NewEncoder(w).Encode(&d)
		if err != nil {
			log.Printf("json.Encode(): %v", err)
			w.WriteHeader(503)
		}
	} else if r.Method == "PUT" {
		id := strings.TrimPrefix(r.URL.Path, "/Ride/")
		var d models.Ride
		if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
			w.WriteHeader(400)
			return
		}
		fsRides.Doc(id).Update(ctx, updates, preconds)
		firestore.Update{
			
		}
		doc, err := fsRides.Doc(id).Get(context.Background())
	}

	// if d.ID == "" {
	// 	fmt.Fprint(w, "Hello, World!")
	// 	return
	// }
	// fmt.Fprintf(w, "Hello, %s!", html.EscapeString(d.ID))
}
